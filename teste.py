#!/usr/bin/env python3
"""
Sistema de Testes Automatizados para API Lycosidae Interpreter
Testa todas as rotas da API com requisi√ß√µes HTTP reais
"""

import requests
import json
import time
import uuid
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import sys
import os

# Configura√ß√µes
BASE_URL = "http://localhost:8080"
ROUTE_PREFIX = "/route"
print(BASE_URL)
print(ROUTE_PREFIX)    
class TestResult:
    """Classe para armazenar resultados de testes"""
    def __init__(self, test_name: str, endpoint: str, method: str):
        self.test_name = test_name
        self.endpoint = endpoint
        self.method = method
        self.status_code = None
        self.response_time = 0
        self.success = False
        self.error_message = None
        self.response_data = None
        self.created_id = None

class APITester:
    """Classe principal para executar testes da API"""
    
    def __init__(self, base_url: str = BASE_URL):
        self.base_url = base_url
        self.session = requests.Session()
        self.test_results: List[TestResult] = []
        self.created_resources = {
            'users': [],
            'competitions': [],
            'exercises': [],
            'tags': [],
            'teams': [],
            'containers': [],
            'user_competitions': [],
            'user_teams': [],
            'team_competitions': [],
            'exercise_tags': [],
            'exercise_competitions': [],
            'container_competitions': []
        }
        
    def make_request(self, method: str, endpoint: str, data: Dict = None, params: Dict = None, max_retries: int = 3) -> TestResult:
        """
        Faz uma requisi√ß√£o HTTP com retry autom√°tico e retorna o resultado
        """
        url = f"{self.base_url}{endpoint}"
        test_name = f"{method.upper()} {endpoint}"
        
        result = TestResult(test_name, endpoint, method)
        start_time = time.time()
        
        for attempt in range(max_retries + 1):
            try:
                # Configurar timeout para evitar travamentos
                timeout = (5, 30)  # (connect timeout, read timeout)
                
                if method.upper() == "GET":
                    response = self.session.get(url, params=params, timeout=timeout)
                elif method.upper() == "POST":
                    response = self.session.post(url, json=data, timeout=timeout)
                elif method.upper() == "PUT":
                    response = self.session.put(url, json=data, timeout=timeout)
                elif method.upper() == "DELETE":
                    response = self.session.delete(url, timeout=timeout)
                else:
                    raise ValueError(f"M√©todo HTTP n√£o suportado: {method}")
                
                result.response_time = time.time() - start_time
                result.status_code = response.status_code
                result.success = 200 <= response.status_code < 300
                
                try:
                    result.response_data = response.json()
                except:
                    result.response_data = response.text
                    
                if not result.success:
                    result.error_message = f"Status {result.status_code}: {result.response_data}"
                
                # Se chegou at√© aqui, a requisi√ß√£o foi feita com sucesso
                break
                
            except requests.exceptions.Timeout as e:
                if attempt < max_retries:
                    print(f"  ‚è∞ Timeout na tentativa {attempt + 1}/{max_retries + 1}, tentando novamente...")
                    time.sleep(1)  # Aguarda 1 segundo antes de tentar novamente
                    continue
                else:
                    result.response_time = time.time() - start_time
                    result.success = False
                    result.error_message = f"Timeout ap√≥s {max_retries + 1} tentativas: {str(e)}"
                    break
                    
            except requests.exceptions.ConnectionError as e:
                if attempt < max_retries:
                    print(f"  üîå Erro de conex√£o na tentativa {attempt + 1}/{max_retries + 1}, tentando novamente...")
                    time.sleep(2)  # Aguarda 2 segundos antes de tentar novamente
                    continue
                else:
                    result.response_time = time.time() - start_time
                    result.success = False
                    result.error_message = f"Erro de conex√£o ap√≥s {max_retries + 1} tentativas: {str(e)}"
                    break
                    
            except Exception as e:
                result.response_time = time.time() - start_time
                result.success = False
                result.error_message = str(e)
                break
            
        self.test_results.append(result)
        return result
    
    def test_health_check(self):
        """Testa o endpoint de health check"""
        print("üîç Testando Health Check...")
        result = self.make_request("GET", "/")
        if result.success:
            print(f"‚úÖ Health Check: OK ({result.response_time:.3f}s)")
        else:
            print(f"‚ùå Health Check: FALHOU - {result.error_message}")
        return result
    
    def test_root_route(self):
        """Testa a rota raiz do router"""
        print("üîç Testando Rota Raiz...")
        result = self.make_request("GET", f"{ROUTE_PREFIX}")
        if result.success:
            print(f"‚úÖ Rota Raiz: OK ({result.response_time:.3f}s)")
        else:
            print(f"‚ùå Rota Raiz: FALHOU - {result.error_message}")
        return result
    
    def test_user_operations(self):
        """Testa todas as opera√ß√µes de usu√°rios"""
        print("\nüë§ Testando Opera√ß√µes de Usu√°rios...")
        
        # Dados de teste para usu√°rio
        user_data = {
            "username": f"testuser_{uuid.uuid4().hex[:8]}",
            "email": f"test_{uuid.uuid4().hex[:8]}@example.com",
            "password": "testpassword123",
            "phone_number": "+5511999999999"
        }
        
        # Teste 1: Criar usu√°rio
        print("  üìù Criando usu√°rio...")
        result = self.make_request("POST", f"{ROUTE_PREFIX}/register", user_data)
        if result.success:
            print(f"  ‚úÖ Usu√°rio criado: OK ({result.response_time:.3f}s)")
            if result.response_data and 'id' in result.response_data:
                self.created_resources['users'].append(result.response_data['id'])
                result.created_id = result.response_data['id']
        else:
            print(f"  ‚ùå Cria√ß√£o de usu√°rio: FALHOU - {result.error_message}")
        
        # Teste 2: Tentar criar usu√°rio com email duplicado
        print("  üìù Testando email duplicado...")
        result = self.make_request("POST", f"{ROUTE_PREFIX}/register", user_data)
        if result.status_code == 400:
            # Para este teste espec√≠fico, status 400 √© sucesso
            result.success = True
            print(f"  ‚úÖ Valida√ß√£o de email duplicado: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Valida√ß√£o de email duplicado: FALHOU - {result.error_message}")
    
    def test_competition_operations(self):
        """Testa todas as opera√ß√µes de competi√ß√µes"""
        print("\nüèÜ Testando Opera√ß√µes de Competi√ß√µes...")
        
        # Dados de teste para competi√ß√£o
        competition_data = {
            "name": f"Competi√ß√£o Teste {uuid.uuid4().hex[:8]}",
            "organizer": "Organizador Teste",
            "invite_code": f"TEST{uuid.uuid4().hex[:8].upper()}",
            "start_date": (datetime.now() + timedelta(days=1)).isoformat(),
            "end_date": (datetime.now() + timedelta(days=30)).isoformat()
        }
        
        # Teste 1: Criar competi√ß√£o
        print("  üìù Criando competi√ß√£o...")
        result = self.make_request("POST", f"{ROUTE_PREFIX}/competitions", competition_data)
        if result.success:
            print(f"  ‚úÖ Competi√ß√£o criada: OK ({result.response_time:.3f}s)")
            if result.response_data and 'id' in result.response_data:
                self.created_resources['competitions'].append(result.response_data['id'])
                result.created_id = result.response_data['id']
            else:
                print(f"  ‚ùå Competi√ß√£o criada mas sem ID na resposta")
                return
        else:
            print(f"  ‚ùå Cria√ß√£o de competi√ß√£o: FALHOU - {result.error_message}")
            return
        
        competition_id = result.created_id
        
        # Teste 2: Buscar competi√ß√£o por ID
        print("  üîç Buscando competi√ß√£o por ID...")
        result = self.make_request("GET", f"{ROUTE_PREFIX}/competitions/{competition_id}")
        if result.success:
            print(f"  ‚úÖ Busca por ID: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Busca por ID: FALHOU - {result.error_message}")
        
        # Teste 3: Buscar competi√ß√£o por c√≥digo de convite
        print("  üîç Buscando competi√ß√£o por c√≥digo de convite...")
        result = self.make_request("GET", f"{ROUTE_PREFIX}/competitions/invite/{competition_data['invite_code']}")
        if result.success:
            print(f"  ‚úÖ Busca por c√≥digo: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Busca por c√≥digo: FALHOU - {result.error_message}")
        
        # Teste 4: Atualizar competi√ß√£o
        print("  üìù Atualizando competi√ß√£o...")
        updated_data = competition_data.copy()
        updated_data["name"] = f"Competi√ß√£o Atualizada {uuid.uuid4().hex[:8]}"
        result = self.make_request("PUT", f"{ROUTE_PREFIX}/competitions/{competition_id}", updated_data)
        if result.success:
            print(f"  ‚úÖ Atualiza√ß√£o: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Atualiza√ß√£o: FALHOU - {result.error_message}")
        
        # Teste 5: Deletar competi√ß√£o
        print("  üóëÔ∏è Deletando competi√ß√£o...")
        result = self.make_request("DELETE", f"{ROUTE_PREFIX}/competitions/{competition_id}")
        if result.success:
            print(f"  ‚úÖ Dele√ß√£o: OK ({result.response_time:.3f}s)")
            self.created_resources['competitions'].remove(competition_id)
        else:
            print(f"  ‚ùå Dele√ß√£o: FALHOU - {result.error_message}")
    
    def test_exercise_operations(self):
        """Testa todas as opera√ß√µes de exerc√≠cios"""
        print("\nüí™ Testando Opera√ß√µes de Exerc√≠cios...")
        
        # Dados de teste para exerc√≠cio
        exercise_data = {
            "link": f"https://example.com/exercise/{uuid.uuid4().hex[:8]}",
            "name": f"Exerc√≠cio Teste {uuid.uuid4().hex[:8]}",
            "score": 100,
            "difficulty": "medium",
            "port": 8080
        }
        
        # Teste 1: Criar exerc√≠cio
        print("  üìù Criando exerc√≠cio...")
        result = self.make_request("POST", f"{ROUTE_PREFIX}/exercises", exercise_data)
        if result.success:
            print(f"  ‚úÖ Exerc√≠cio criado: OK ({result.response_time:.3f}s)")
            if result.response_data and 'id' in result.response_data:
                self.created_resources['exercises'].append(result.response_data['id'])
                result.created_id = result.response_data['id']
        else:
            print(f"  ‚ùå Cria√ß√£o de exerc√≠cio: FALHOU - {result.error_message}")
            return
        
        exercise_id = result.created_id
        
        # Teste 2: Buscar exerc√≠cio por ID
        print("  üîç Buscando exerc√≠cio por ID...")
        result = self.make_request("GET", f"{ROUTE_PREFIX}/exercises/{exercise_id}")
        if result.success:
            print(f"  ‚úÖ Busca por ID: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Busca por ID: FALHOU - {result.error_message}")
        
        # Teste 3: Atualizar exerc√≠cio
        print("  üìù Atualizando exerc√≠cio...")
        updated_data = exercise_data.copy()
        updated_data["name"] = f"Exerc√≠cio Atualizado {uuid.uuid4().hex[:8]}"
        updated_data["score"] = 150
        result = self.make_request("PUT", f"{ROUTE_PREFIX}/exercises/{exercise_id}", updated_data)
        if result.success:
            print(f"  ‚úÖ Atualiza√ß√£o: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Atualiza√ß√£o: FALHOU - {result.error_message}")
        
        # Teste 4: Deletar exerc√≠cio
        print("  üóëÔ∏è Deletando exerc√≠cio...")
        result = self.make_request("DELETE", f"{ROUTE_PREFIX}/exercises/{exercise_id}")
        if result.success:
            print(f"  ‚úÖ Dele√ß√£o: OK ({result.response_time:.3f}s)")
            self.created_resources['exercises'].remove(exercise_id)
        else:
            print(f"  ‚ùå Dele√ß√£o: FALHOU - {result.error_message}")
    
    def test_tag_operations(self):
        """Testa todas as opera√ß√µes de tags"""
        print("\nüè∑Ô∏è Testando Opera√ß√µes de Tags...")
        
        # Dados de teste para tag
        tag_data = {
            "type": f"test_tag_{uuid.uuid4().hex[:8]}"
        }
        
        # Teste 1: Criar tag
        print("  üìù Criando tag...")
        result = self.make_request("POST", f"{ROUTE_PREFIX}/tags", tag_data)
        if result.success:
            print(f"  ‚úÖ Tag criada: OK ({result.response_time:.3f}s)")
            if result.response_data and 'id' in result.response_data:
                self.created_resources['tags'].append(result.response_data['id'])
                result.created_id = result.response_data['id']
        else:
            print(f"  ‚ùå Cria√ß√£o de tag: FALHOU - {result.error_message}")
            return
        
        tag_id = result.created_id
        
        # Teste 2: Buscar tag por ID
        print("  üîç Buscando tag por ID...")
        result = self.make_request("GET", f"{ROUTE_PREFIX}/tags/{tag_id}")
        if result.success:
            print(f"  ‚úÖ Busca por ID: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Busca por ID: FALHOU - {result.error_message}")
        
        # Teste 3: Buscar tag por tipo
        print("  üîç Buscando tag por tipo...")
        result = self.make_request("GET", f"{ROUTE_PREFIX}/tags/type/{tag_data['type']}")
        if result.success:
            print(f"  ‚úÖ Busca por tipo: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Busca por tipo: FALHOU - {result.error_message}")
        
        # Teste 4: Atualizar tag
        print("  üìù Atualizando tag...")
        updated_data = tag_data.copy()
        updated_data["type"] = f"updated_tag_{uuid.uuid4().hex[:8]}"
        result = self.make_request("PUT", f"{ROUTE_PREFIX}/tags/{tag_id}", updated_data)
        if result.success:
            print(f"  ‚úÖ Atualiza√ß√£o: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Atualiza√ß√£o: FALHOU - {result.error_message}")
        
        # Teste 5: Deletar tag
        print("  üóëÔ∏è Deletando tag...")
        result = self.make_request("DELETE", f"{ROUTE_PREFIX}/tags/{tag_id}")
        if result.success:
            print(f"  ‚úÖ Dele√ß√£o: OK ({result.response_time:.3f}s)")
            self.created_resources['tags'].remove(tag_id)
        else:
            print(f"  ‚ùå Dele√ß√£o: FALHOU - {result.error_message}")
    
    def test_team_operations(self):
        """Testa todas as opera√ß√µes de times"""
        print("\nüë• Testando Opera√ß√µes de Times...")
        
        # Primeiro, precisamos criar uma competi√ß√£o e um usu√°rio
        print("  üìù Preparando depend√™ncias...")
        
        # Criar competi√ß√£o
        competition_data = {
            "name": f"Competi√ß√£o para Time {uuid.uuid4().hex[:8]}",
            "organizer": "Organizador Teste",
            "invite_code": f"TEAM{uuid.uuid4().hex[:8].upper()}",
            "start_date": (datetime.now() + timedelta(days=1)).isoformat(),
            "end_date": (datetime.now() + timedelta(days=30)).isoformat()
        }
        
        comp_result = self.make_request("POST", f"{ROUTE_PREFIX}/competitions", competition_data)
        if not comp_result.success:
            print(f"  ‚ùå Falha ao criar competi√ß√£o: {comp_result.error_message}")
            return
        
        # Definir created_id se a resposta cont√©m um ID
        if comp_result.response_data and 'id' in comp_result.response_data:
            comp_result.created_id = comp_result.response_data['id']
        
        competition_id = comp_result.created_id
        print(f"  üîç Debug - competition_id: {competition_id}")
        if not competition_id:
            print(f"  ‚ùå Competi√ß√£o criada mas sem ID")
            return
        
        self.created_resources['competitions'].append(competition_id)
        
        # Criar usu√°rio
        user_data = {
            "username": f"teamuser_{uuid.uuid4().hex[:8]}",
            "email": f"team_{uuid.uuid4().hex[:8]}@example.com",
            "password": "testpassword123",
            "phone_number": "+5511999999999"
        }
        
        user_result = self.make_request("POST", f"{ROUTE_PREFIX}/register", user_data)
        if not user_result.success:
            print(f"  ‚ùå Falha ao criar usu√°rio: {user_result.error_message}")
            return
        
        # Definir created_id se a resposta cont√©m um ID
        if user_result.response_data and 'id' in user_result.response_data:
            user_result.created_id = user_result.response_data['id']
        
        user_id = user_result.created_id
        if not user_id:
            print(f"  ‚ùå Usu√°rio criado mas sem ID")
            return
        
        self.created_resources['users'].append(user_id)
        
        # Dados de teste para time
        team_data = {
            "name": f"Time Teste {uuid.uuid4().hex[:8]}",
            "competition": competition_id,
            "creator": user_id,
            "score": 0
        }
        
        # Verificar se os IDs s√£o v√°lidos
        if not competition_id or not user_id:
            print(f"  ‚ùå IDs inv√°lidos - competition_id: {competition_id}, user_id: {user_id}")
            return
        
        print(f"  üîç Debug - competition_id: {competition_id}, user_id: {user_id}")
        
        # Teste 1: Criar time
        print("  üìù Criando time...")
        result = self.make_request("POST", f"{ROUTE_PREFIX}/teams", team_data)
        if result.success:
            print(f"  ‚úÖ Time criado: OK ({result.response_time:.3f}s)")
            if result.response_data and 'id' in result.response_data:
                self.created_resources['teams'].append(result.response_data['id'])
                result.created_id = result.response_data['id']
        else:
            print(f"  ‚ùå Cria√ß√£o de time: FALHOU - {result.error_message}")
            return
        
        team_id = result.created_id
        
        # Teste 2: Buscar time por ID
        print("  üîç Buscando time por ID...")
        result = self.make_request("GET", f"{ROUTE_PREFIX}/teams/{team_id}")
        if result.success:
            print(f"  ‚úÖ Busca por ID: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Busca por ID: FALHOU - {result.error_message}")
        
        # Teste 3: Atualizar time
        print("  üìù Atualizando time...")
        updated_data = team_data.copy()
        updated_data["name"] = f"Time Atualizado {uuid.uuid4().hex[:8]}"
        updated_data["score"] = 50
        result = self.make_request("PUT", f"{ROUTE_PREFIX}/teams/{team_id}", updated_data)
        if result.success:
            print(f"  ‚úÖ Atualiza√ß√£o: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Atualiza√ß√£o: FALHOU - {result.error_message}")
        
        # Teste 4: Deletar time
        print("  üóëÔ∏è Deletando time...")
        result = self.make_request("DELETE", f"{ROUTE_PREFIX}/teams/{team_id}")
        if result.success:
            print(f"  ‚úÖ Dele√ß√£o: OK ({result.response_time:.3f}s)")
            self.created_resources['teams'].remove(team_id)
        else:
            print(f"  ‚ùå Dele√ß√£o: FALHOU - {result.error_message}")
    
    def test_container_operations(self):
        """Testa todas as opera√ß√µes de containers"""
        print("\nüì¶ Testando Opera√ß√µes de Containers...")
        
        # Dados de teste para container
        container_data = {
            "deadline": (datetime.now() + timedelta(days=7)).isoformat()
        }
        
        # Teste 1: Criar container
        print("  üìù Criando container...")
        result = self.make_request("POST", f"{ROUTE_PREFIX}/containers", container_data)
        if result.success:
            print(f"  ‚úÖ Container criado: OK ({result.response_time:.3f}s)")
            if result.response_data and 'id' in result.response_data:
                self.created_resources['containers'].append(result.response_data['id'])
                result.created_id = result.response_data['id']
        else:
            print(f"  ‚ùå Cria√ß√£o de container: FALHOU - {result.error_message}")
            return
        
        container_id = result.created_id
        
        # Teste 2: Buscar container por ID
        print("  üîç Buscando container por ID...")
        result = self.make_request("GET", f"{ROUTE_PREFIX}/containers/{container_id}")
        if result.success:
            print(f"  ‚úÖ Busca por ID: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Busca por ID: FALHOU - {result.error_message}")
        
        # Teste 3: Atualizar container
        print("  üìù Atualizando container...")
        updated_data = container_data.copy()
        updated_data["deadline"] = (datetime.now() + timedelta(days=14)).isoformat()
        result = self.make_request("PUT", f"{ROUTE_PREFIX}/containers/{container_id}", updated_data)
        if result.success:
            print(f"  ‚úÖ Atualiza√ß√£o: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Atualiza√ß√£o: FALHOU - {result.error_message}")
        
        # Teste 4: Deletar container
        print("  üóëÔ∏è Deletando container...")
        result = self.make_request("DELETE", f"{ROUTE_PREFIX}/containers/{container_id}")
        if result.success:
            print(f"  ‚úÖ Dele√ß√£o: OK ({result.response_time:.3f}s)")
            self.created_resources['containers'].remove(container_id)
        else:
            print(f"  ‚ùå Dele√ß√£o: FALHOU - {result.error_message}")
    
    def test_relationship_operations(self):
        """Testa todas as opera√ß√µes de relacionamentos"""
        print("\nüîó Testando Opera√ß√µes de Relacionamentos...")
        
        # Preparar dados necess√°rios
        print("  üìù Preparando depend√™ncias...")
        
        # Criar usu√°rio
        user_data = {
            "username": f"reluser_{uuid.uuid4().hex[:8]}",
            "email": f"rel_{uuid.uuid4().hex[:8]}@example.com",
            "password": "testpassword123",
            "phone_number": "+5511999999999"
        }
        
        user_result = self.make_request("POST", f"{ROUTE_PREFIX}/register", user_data)
        if not user_result.success:
            print(f"  ‚ùå Falha ao criar usu√°rio: {user_result.error_message}")
            return
        
        # Definir created_id se a resposta cont√©m um ID
        if user_result.response_data and 'id' in user_result.response_data:
            user_result.created_id = user_result.response_data['id']
        
        user_id = user_result.created_id
        self.created_resources['users'].append(user_id)
        
        # Criar competi√ß√£o
        competition_data = {
            "name": f"Competi√ß√£o para Relacionamentos {uuid.uuid4().hex[:8]}",
            "organizer": "Organizador Teste",
            "invite_code": f"REL{uuid.uuid4().hex[:8].upper()}",
            "start_date": (datetime.now() + timedelta(days=1)).isoformat(),
            "end_date": (datetime.now() + timedelta(days=30)).isoformat()
        }
        
        comp_result = self.make_request("POST", f"{ROUTE_PREFIX}/competitions", competition_data)
        if not comp_result.success:
            print(f"  ‚ùå Falha ao criar competi√ß√£o: {comp_result.error_message}")
            return
        
        # Definir created_id se a resposta cont√©m um ID
        if comp_result.response_data and 'id' in comp_result.response_data:
            comp_result.created_id = comp_result.response_data['id']
        
        competition_id = comp_result.created_id
        self.created_resources['competitions'].append(competition_id)
        
        # Criar time
        team_data = {
            "name": f"Time para Relacionamentos {uuid.uuid4().hex[:8]}",
            "competition": competition_id,
            "creator": user_id,
            "score": 0
        }
        
        team_result = self.make_request("POST", f"{ROUTE_PREFIX}/teams", team_data)
        if not team_result.success:
            print(f"  ‚ùå Falha ao criar time: {team_result.error_message}")
            return
        
        # Definir created_id se a resposta cont√©m um ID
        if team_result.response_data and 'id' in team_result.response_data:
            team_result.created_id = team_result.response_data['id']
        
        team_id = team_result.created_id
        self.created_resources['teams'].append(team_id)
        
        # Criar exerc√≠cio
        exercise_data = {
            "link": f"https://example.com/rel_exercise/{uuid.uuid4().hex[:8]}",
            "name": f"Exerc√≠cio para Relacionamentos {uuid.uuid4().hex[:8]}",
            "score": 100,
            "difficulty": "medium",
            "port": 9090
        }
        
        exercise_result = self.make_request("POST", f"{ROUTE_PREFIX}/exercises", exercise_data)
        if not exercise_result.success:
            print(f"  ‚ùå Falha ao criar exerc√≠cio: {exercise_result.error_message}")
            return
        
        # Definir created_id se a resposta cont√©m um ID
        if exercise_result.response_data and 'id' in exercise_result.response_data:
            exercise_result.created_id = exercise_result.response_data['id']
        
        exercise_id = exercise_result.created_id
        self.created_resources['exercises'].append(exercise_id)
        
        # Criar tag
        tag_data = {
            "type": f"rel_tag_{uuid.uuid4().hex[:8]}"
        }
        
        tag_result = self.make_request("POST", f"{ROUTE_PREFIX}/tags", tag_data)
        if not tag_result.success:
            print(f"  ‚ùå Falha ao criar tag: {tag_result.error_message}")
            return
        
        # Definir created_id se a resposta cont√©m um ID
        if tag_result.response_data and 'id' in tag_result.response_data:
            tag_result.created_id = tag_result.response_data['id']
        
        tag_id = tag_result.created_id
        self.created_resources['tags'].append(tag_id)
        
        # Criar container
        container_data = {
            "deadline": (datetime.now() + timedelta(days=7)).isoformat()
        }
        
        container_result = self.make_request("POST", f"{ROUTE_PREFIX}/containers", container_data)
        if not container_result.success:
            print(f"  ‚ùå Falha ao criar container: {container_result.error_message}")
            return
        
        # Definir created_id se a resposta cont√©m um ID
        if container_result.response_data and 'id' in container_result.response_data:
            container_result.created_id = container_result.response_data['id']
        
        container_id = container_result.created_id
        self.created_resources['containers'].append(container_id)
        
        # Teste 1: User-Competition
        print("  üîó Testando User-Competition...")
        user_comp_data = {
            "user_id": user_id,
            "competition_id": competition_id
        }
        
        result = self.make_request("POST", f"{ROUTE_PREFIX}/user-competitions", user_comp_data)
        if result.success:
            print(f"  ‚úÖ User-Competition criado: OK ({result.response_time:.3f}s)")
            self.created_resources['user_competitions'].append(f"{user_id}_{competition_id}")
        else:
            print(f"  ‚ùå User-Competition: FALHOU - {result.error_message}")
        
        # Teste 2: User-Team
        print("  üîó Testando User-Team...")
        user_team_data = {
            "user_id": user_id,
            "team_id": team_id
        }
        
        result = self.make_request("POST", f"{ROUTE_PREFIX}/user-teams", user_team_data)
        if result.success:
            print(f"  ‚úÖ User-Team criado: OK ({result.response_time:.3f}s)")
            self.created_resources['user_teams'].append(f"{user_id}_{team_id}")
        else:
            print(f"  ‚ùå User-Team: FALHOU - {result.error_message}")
        
        # Teste 3: Team-Competition
        print("  üîó Testando Team-Competition...")
        team_comp_data = {
            "team_id": team_id,
            "competition_id": competition_id
        }
        
        result = self.make_request("POST", f"{ROUTE_PREFIX}/team-competitions", team_comp_data)
        if result.success:
            print(f"  ‚úÖ Team-Competition criado: OK ({result.response_time:.3f}s)")
            self.created_resources['team_competitions'].append(f"{team_id}_{competition_id}")
        else:
            print(f"  ‚ùå Team-Competition: FALHOU - {result.error_message}")
        
        # Teste 4: Exercise-Tag
        print("  üîó Testando Exercise-Tag...")
        exercise_tag_data = {
            "exercise_id": exercise_id,
            "tag_id": tag_id
        }
        
        result = self.make_request("POST", f"{ROUTE_PREFIX}/exercise-tags", exercise_tag_data)
        if result.success:
            print(f"  ‚úÖ Exercise-Tag criado: OK ({result.response_time:.3f}s)")
            self.created_resources['exercise_tags'].append(f"{exercise_id}_{tag_id}")
        else:
            print(f"  ‚ùå Exercise-Tag: FALHOU - {result.error_message}")
        
        # Teste 5: Exercise-Competition
        print("  üîó Testando Exercise-Competition...")
        exercise_comp_data = {
            "exercise_id": exercise_id,
            "competition_id": competition_id
        }
        
        result = self.make_request("POST", f"{ROUTE_PREFIX}/exercise-competitions", exercise_comp_data)
        if result.success:
            print(f"  ‚úÖ Exercise-Competition criado: OK ({result.response_time:.3f}s)")
            self.created_resources['exercise_competitions'].append(f"{exercise_id}_{competition_id}")
        else:
            print(f"  ‚ùå Exercise-Competition: FALHOU - {result.error_message}")
        
        # Teste 6: Container-Competition
        print("  üîó Testando Container-Competition...")
        container_comp_data = {
            "container_id": container_id,
            "competition_id": competition_id
        }
        
        result = self.make_request("POST", f"{ROUTE_PREFIX}/container-competitions", container_comp_data)
        if result.success:
            print(f"  ‚úÖ Container-Competition criado: OK ({result.response_time:.3f}s)")
            self.created_resources['container_competitions'].append(f"{container_id}_{competition_id}")
        else:
            print(f"  ‚ùå Container-Competition: FALHOU - {result.error_message}")
        
        # Testes de dele√ß√£o dos relacionamentos
        print("  üóëÔ∏è Testando dele√ß√µes de relacionamentos...")
        
        # Deletar User-Competition
        result = self.make_request("DELETE", f"{ROUTE_PREFIX}/user-competitions/{user_id}/{competition_id}")
        if result.success:
            print(f"  ‚úÖ User-Competition deletado: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Dele√ß√£o User-Competition: FALHOU - {result.error_message}")
        
        # Deletar User-Team
        result = self.make_request("DELETE", f"{ROUTE_PREFIX}/user-teams/{user_id}/{team_id}")
        if result.success:
            print(f"  ‚úÖ User-Team deletado: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Dele√ß√£o User-Team: FALHOU - {result.error_message}")
        
        # Deletar Team-Competition
        result = self.make_request("DELETE", f"{ROUTE_PREFIX}/team-competitions/{team_id}/{competition_id}")
        if result.success:
            print(f"  ‚úÖ Team-Competition deletado: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Dele√ß√£o Team-Competition: FALHOU - {result.error_message}")
        
        # Deletar Exercise-Tag
        result = self.make_request("DELETE", f"{ROUTE_PREFIX}/exercise-tags/{exercise_id}/{tag_id}")
        if result.success:
            print(f"  ‚úÖ Exercise-Tag deletado: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Dele√ß√£o Exercise-Tag: FALHOU - {result.error_message}")
        
        # Deletar Exercise-Competition
        result = self.make_request("DELETE", f"{ROUTE_PREFIX}/exercise-competitions/{exercise_id}/{competition_id}")
        if result.success:
            print(f"  ‚úÖ Exercise-Competition deletado: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Dele√ß√£o Exercise-Competition: FALHOU - {result.error_message}")
        
        # Deletar Container-Competition
        result = self.make_request("DELETE", f"{ROUTE_PREFIX}/container-competitions/{container_id}/{competition_id}")
        if result.success:
            print(f"  ‚úÖ Container-Competition deletado: OK ({result.response_time:.3f}s)")
        else:
            print(f"  ‚ùå Dele√ß√£o Container-Competition: FALHOU - {result.error_message}")
    
    def cleanup_resources(self):
        """Limpa todos os recursos criados durante os testes"""
        print("\nüßπ Limpando recursos criados...")
        
        # Deletar todos os recursos na ordem inversa de cria√ß√£o
        for container_id in reversed(self.created_resources['containers']):
            self.make_request("DELETE", f"{ROUTE_PREFIX}/containers/{container_id}")
        
        for exercise_id in reversed(self.created_resources['exercises']):
            self.make_request("DELETE", f"{ROUTE_PREFIX}/exercises/{exercise_id}")
        
        for tag_id in reversed(self.created_resources['tags']):
            self.make_request("DELETE", f"{ROUTE_PREFIX}/tags/{tag_id}")
        
        for team_id in reversed(self.created_resources['teams']):
            self.make_request("DELETE", f"{ROUTE_PREFIX}/teams/{team_id}")
        
        for competition_id in reversed(self.created_resources['competitions']):
            self.make_request("DELETE", f"{ROUTE_PREFIX}/competitions/{competition_id}")
        
        # Usu√°rios n√£o podem ser deletados via API, ent√£o apenas listamos
        if self.created_resources['users']:
            print(f"  ‚ö†Ô∏è {len(self.created_resources['users'])} usu√°rios criados (n√£o podem ser deletados via API)")
    
    def generate_report(self):
        """Gera um relat√≥rio detalhado dos testes"""
        print("\n" + "="*80)
        print("üìä RELAT√ìRIO DE TESTES")
        print("="*80)
        
        total_tests = len(self.test_results)
        successful_tests = sum(1 for result in self.test_results if result.success)
        failed_tests = total_tests - successful_tests
        
        print(f"Total de testes executados: {total_tests}")
        print(f"Testes bem-sucedidos: {successful_tests} ‚úÖ")
        print(f"Testes falharam: {failed_tests} ‚ùå")
        print(f"Taxa de sucesso: {(successful_tests/total_tests)*100:.1f}%")
        
        if failed_tests > 0:
            print("\n‚ùå TESTES QUE FALHARAM:")
            print("-" * 50)
            for result in self.test_results:
                if not result.success:
                    print(f"‚Ä¢ {result.test_name}")
                    print(f"  Status: {result.status_code}")
                    print(f"  Erro: {result.error_message}")
                    print(f"  Tempo: {result.response_time:.3f}s")
                    print()
        
        print("\n‚è±Ô∏è ESTAT√çSTICAS DE TEMPO:")
        print("-" * 50)
        response_times = [result.response_time for result in self.test_results if result.success]
        if response_times:
            avg_time = sum(response_times) / len(response_times)
            min_time = min(response_times)
            max_time = max(response_times)
            print(f"Tempo m√©dio de resposta: {avg_time:.3f}s")
            print(f"Tempo m√≠nimo: {min_time:.3f}s")
            print(f"Tempo m√°ximo: {max_time:.3f}s")
        
        print("\nüîó ENDPOINTS TESTADOS:")
        print("-" * 50)
        endpoints = set()
        for result in self.test_results:
            endpoints.add(f"{result.method.upper()} {result.endpoint}")
        
        for endpoint in sorted(endpoints):
            print(f"‚Ä¢ {endpoint}")
        
        print("\n" + "="*80)
        
        return {
            'total_tests': total_tests,
            'successful_tests': successful_tests,
            'failed_tests': failed_tests,
            'success_rate': (successful_tests/total_tests)*100 if total_tests > 0 else 0,
            'avg_response_time': sum(response_times) / len(response_times) if response_times else 0
        }
    
    def run_all_tests(self):
        """Executa todos os testes"""
        print("üöÄ Iniciando Testes da API Lycosidae Interpreter")
        print("="*60)
        
        start_time = time.time()
        
        # Executar todos os testes
        self.test_health_check()
        self.test_root_route()
        self.test_user_operations()
        self.test_competition_operations()
        self.test_exercise_operations()
        self.test_tag_operations()
        self.test_team_operations()
        self.test_container_operations()
        self.test_relationship_operations()
        
        # Limpar recursos
        self.cleanup_resources()
        
        # Gerar relat√≥rio
        total_time = time.time() - start_time
        print(f"\n‚è±Ô∏è Tempo total de execu√ß√£o: {total_time:.2f}s")
        
        report = self.generate_report()
        return report

def main():
    """Fun√ß√£o principal"""
    print("üîß Configurando testes...")
    
    # Verificar se a API est√° rodando
    try:
        response = requests.get(f"{BASE_URL}/", timeout=5)
        if response.status_code != 200:
            print(f"‚ùå API n√£o est√° respondendo corretamente. Status: {response.status_code}")
            sys.exit(1)
    except requests.exceptions.RequestException as e:
        print(f"‚ùå N√£o foi poss√≠vel conectar √† API em {BASE_URL}")
        print(f"   Certifique-se de que a API est√° rodando com: uvicorn app.main:app --reload")
        print(f"   Erro: {e}")
        sys.exit(1)
    
    # Executar testes
    tester = APITester()
    report = tester.run_all_tests()
    
    # Retornar c√≥digo de sa√≠da baseado no sucesso
    if report['failed_tests'] == 0:
        print("\nüéâ Todos os testes passaram com sucesso!")
        sys.exit(0)
    else:
        print(f"\n‚ö†Ô∏è {report['failed_tests']} testes falharam. Verifique os logs acima.")
        sys.exit(1)

if __name__ == "__main__":
    main()
